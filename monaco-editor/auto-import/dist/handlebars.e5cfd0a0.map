{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/handlebars/handlebars.js"],"names":["_monaco","monaco","self","EMPTY_ELEMENTS","conf","open","close","RegExp","join","indentAction","languages","IndentAction","IndentOutdent","Indent","language","token","switchTo","next","nextEmbedded","include"],"mappings":"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","file":"handlebars.e5cfd0a0.map","sourceRoot":"../demo","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n// Allow for running under nodejs/requirejs in tests\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\nvar EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];\nexport var conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n    comments: {\n        blockComment: ['{{!--', '--}}']\n    },\n    brackets: [\n        ['<!--', '-->'],\n        ['<', '>'],\n        ['{{', '}}'],\n        ['{', '}'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' }\n    ],\n    surroundingPairs: [\n        { open: '<', close: '>' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' }\n    ],\n    onEnterRules: [\n        {\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n            action: { indentAction: _monaco.languages.IndentAction.IndentOutdent }\n        },\n        {\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            action: { indentAction: _monaco.languages.IndentAction.Indent }\n        }\n    ],\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '',\n    // ignoreCase: true,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.root' }],\n            [/<!DOCTYPE/, 'metatag.html', '@doctype'],\n            [/<!--/, 'comment.html', '@comment'],\n            [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n            [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\n            [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\n            [/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n            [/(<\\/)(\\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n            [/</, 'delimiter.html'],\n            [/\\{/, 'delimiter.html'],\n            [/[^<{]+/] // text\n        ],\n        doctype: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.comment' }],\n            [/[^>]+/, 'metatag.content.html'],\n            [/>/, 'metatag.html', '@pop'],\n        ],\n        comment: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.comment' }],\n            [/-->/, 'comment.html', '@pop'],\n            [/[^-]+/, 'comment.content.html'],\n            [/./, 'comment.content.html']\n        ],\n        otherTag: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.otherTag' }],\n            [/\\/?>/, 'delimiter.html', '@pop'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n        ],\n        // -- BEGIN <script> tags handling\n        // After <script\n        script: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.script' }],\n            [/type/, 'attribute.name', '@scriptAfterType'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\n            [/[ \\t\\r\\n]+/],\n            [/(<\\/)(script\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\n        ],\n        // After <script ... type\n        scriptAfterType: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.scriptAfterType' }],\n            [/=/, 'delimiter', '@scriptAfterTypeEquals'],\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <script ... type =\n        scriptAfterTypeEquals: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.scriptAfterTypeEquals' }],\n            [/\"([^\"]*)\"/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],\n            [/'([^']*)'/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <script ... type = $S2\n        scriptWithCustomType: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.scriptWithCustomType.$S2' }],\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        scriptEmbedded: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInEmbeddedState.scriptEmbedded.$S2', nextEmbedded: '@pop' }],\n            [/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n        ],\n        // -- END <script> tags handling\n        // -- BEGIN <style> tags handling\n        // After <style\n        style: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.style' }],\n            [/type/, 'attribute.name', '@styleAfterType'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\n            [/[ \\t\\r\\n]+/],\n            [/(<\\/)(style\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\n        ],\n        // After <style ... type\n        styleAfterType: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.styleAfterType' }],\n            [/=/, 'delimiter', '@styleAfterTypeEquals'],\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <style ... type =\n        styleAfterTypeEquals: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.styleAfterTypeEquals' }],\n            [/\"([^\"]*)\"/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],\n            [/'([^']*)'/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <style ... type = $S2\n        styleWithCustomType: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.styleWithCustomType.$S2' }],\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        styleEmbedded: [\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInEmbeddedState.styleEmbedded.$S2', nextEmbedded: '@pop' }],\n            [/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n        ],\n        // -- END <style> tags handling\n        handlebarsInSimpleState: [\n            [/\\{\\{\\{?/, 'delimiter.handlebars'],\n            [/\\}\\}\\}?/, { token: 'delimiter.handlebars', switchTo: '@$S2.$S3' }],\n            { include: 'handlebarsRoot' }\n        ],\n        handlebarsInEmbeddedState: [\n            [/\\{\\{\\{?/, 'delimiter.handlebars'],\n            [/\\}\\}\\}?/, { token: 'delimiter.handlebars', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }],\n            { include: 'handlebarsRoot' }\n        ],\n        handlebarsRoot: [\n            [/[#/][^\\s}]+/, 'keyword.helper.handlebars'],\n            [/else\\b/, 'keyword.helper.handlebars'],\n            [/[\\s]+/],\n            [/[^}]/, 'variable.parameter.handlebars'],\n        ],\n    },\n};\n"]}