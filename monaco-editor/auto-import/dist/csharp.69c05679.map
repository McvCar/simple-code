{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/csharp/csharp.js"],"names":["conf","open","close","notIn","RegExp","language","token","next","include"],"mappings":"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","file":"csharp.69c05679.map","sourceRoot":"../demo","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/'],\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')'],\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: '\\'', close: '\\'' },\n        { open: '\"', close: '\"' },\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.cs',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    keywords: [\n        'extern', 'alias', 'using', 'bool', 'decimal', 'sbyte', 'byte', 'short',\n        'ushort', 'int', 'uint', 'long', 'ulong', 'char', 'float', 'double',\n        'object', 'dynamic', 'string', 'assembly', 'is', 'as', 'ref',\n        'out', 'this', 'base', 'new', 'typeof', 'void', 'checked', 'unchecked',\n        'default', 'delegate', 'var', 'const', 'if', 'else', 'switch', 'case',\n        'while', 'do', 'for', 'foreach', 'in', 'break', 'continue', 'goto',\n        'return', 'throw', 'try', 'catch', 'finally', 'lock', 'yield', 'from',\n        'let', 'where', 'join', 'on', 'equals', 'into', 'orderby', 'ascending',\n        'descending', 'select', 'group', 'by', 'namespace', 'partial', 'class',\n        'field', 'event', 'method', 'param', 'property', 'public', 'protected',\n        'internal', 'private', 'abstract', 'sealed', 'static', 'struct', 'readonly',\n        'volatile', 'virtual', 'override', 'params', 'get', 'set', 'add', 'remove',\n        'operator', 'true', 'false', 'implicit', 'explicit', 'interface', 'enum',\n        'null', 'async', 'await', 'fixed', 'sizeof', 'stackalloc', 'unsafe', 'nameof',\n        'when'\n    ],\n    namespaceFollows: [\n        'namespace', 'using',\n    ],\n    parenFollows: [\n        'if', 'for', 'while', 'switch', 'foreach', 'using', 'catch', 'when'\n    ],\n    operators: [\n        '=', '??', '||', '&&', '|', '^', '&', '==', '!=', '<=', '>=', '<<',\n        '+', '-', '*', '/', '%', '!', '~', '++', '--', '+=',\n        '-=', '*=', '/=', '%=', '&=', '|=', '^=', '<<=', '>>=', '>>', '=>'\n    ],\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    // escape sequences\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [/\\@?[a-zA-Z_]\\w*/, {\n                    cases: {\n                        '@namespaceFollows': { token: 'keyword.$0', next: '@namespace' },\n                        '@keywords': { token: 'keyword.$0', next: '@qualified' },\n                        '@default': { token: 'identifier', next: '@qualified' }\n                    }\n                }],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/}/, {\n                    cases: {\n                        '$S2==interpolatedstring': { token: 'string.quote', next: '@pop' },\n                        '$S2==litinterpstring': { token: 'string.quote', next: '@pop' },\n                        '@default': '@brackets'\n                    }\n                }],\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }],\n            // numbers\n            [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?[fFdD]?/, 'number.float'],\n            [/0[xX][0-9a-fA-F_]+/, 'number.hex'],\n            [/0[bB][01_]+/, 'number.hex'],\n            [/[0-9_]+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, { token: 'string.quote', next: '@string' }],\n            [/\\$\\@\"/, { token: 'string.quote', next: '@litinterpstring' }],\n            [/\\@\"/, { token: 'string.quote', next: '@litstring' }],\n            [/\\$\"/, { token: 'string.quote', next: '@interpolatedstring' }],\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n            [/'/, 'string.invalid']\n        ],\n        qualified: [\n            [/[a-zA-Z_][\\w]*/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }],\n            [/\\./, 'delimiter'],\n            ['', '', '@pop'],\n        ],\n        namespace: [\n            { include: '@whitespace' },\n            [/[A-Z]\\w*/, 'namespace'],\n            [/[\\.=]/, 'delimiter'],\n            ['', '', '@pop'],\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            // [/\\/\\*/,    'comment', '@push' ],    // no nested comments :-(\n            ['\\\\*/', 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ],\n        litstring: [\n            [/[^\"]+/, 'string'],\n            [/\"\"/, 'string.escape'],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ],\n        litinterpstring: [\n            [/[^\"{]+/, 'string'],\n            [/\"\"/, 'string.escape'],\n            [/{{/, 'string.escape'],\n            [/}}/, 'string.escape'],\n            [/{/, { token: 'string.quote', next: 'root.litinterpstring' }],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ],\n        interpolatedstring: [\n            [/[^\\\\\"{]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/{{/, 'string.escape'],\n            [/}}/, 'string.escape'],\n            [/{/, { token: 'string.quote', next: 'root.interpolatedstring' }],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ],\n        whitespace: [\n            [/^[ \\t\\v\\f]*#((r)|(load))(?=\\s)/, 'directive.csx'],\n            [/^[ \\t\\v\\f]*#\\w.*$/, 'namespace.cpp'],\n            [/[ \\t\\v\\f\\r\\n]+/, ''],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment'],\n        ],\n    },\n};\n"]}