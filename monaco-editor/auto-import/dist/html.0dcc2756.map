{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/html/html.js"],"names":["_monaco","monaco","self","EMPTY_ELEMENTS","conf","open","close","RegExp","join","indentAction","languages","IndentAction","IndentOutdent","Indent","language","token","next","nextEmbedded","switchTo"],"mappings":"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","file":"html.0dcc2756.map","sourceRoot":"../demo","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n// Allow for running under nodejs/requirejs in tests\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\nvar EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];\nexport var conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n    comments: {\n        blockComment: ['<!--', '-->']\n    },\n    brackets: [\n        ['<!--', '-->'],\n        ['<', '>'],\n        ['{', '}'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' }\n    ],\n    surroundingPairs: [\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n    ],\n    onEnterRules: [\n        {\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))([_:\\\\w][_:\\\\w-.\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            afterText: /^<\\/([_:\\w][_:\\w-.\\d]*)\\s*>$/i,\n            action: { indentAction: _monaco.languages.IndentAction.IndentOutdent }\n        },\n        {\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            action: { indentAction: _monaco.languages.IndentAction.Indent }\n        }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*<!--\\\\s*#region\\\\b.*-->\"),\n            end: new RegExp(\"^\\\\s*<!--\\\\s*#endregion\\\\b.*-->\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.html',\n    ignoreCase: true,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            [/<!DOCTYPE/, 'metatag', '@doctype'],\n            [/<!--/, 'comment', '@comment'],\n            [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/, ['delimiter', 'tag', '', 'delimiter']],\n            [/(<)(script)/, ['delimiter', { token: 'tag', next: '@script' }]],\n            [/(<)(style)/, ['delimiter', { token: 'tag', next: '@style' }]],\n            [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter', { token: 'tag', next: '@otherTag' }]],\n            [/(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter', { token: 'tag', next: '@otherTag' }]],\n            [/</, 'delimiter'],\n            [/[^<]+/],\n        ],\n        doctype: [\n            [/[^>]+/, 'metatag.content'],\n            [/>/, 'metatag', '@pop'],\n        ],\n        comment: [\n            [/-->/, 'comment', '@pop'],\n            [/[^-]+/, 'comment.content'],\n            [/./, 'comment.content']\n        ],\n        otherTag: [\n            [/\\/?>/, 'delimiter', '@pop'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n        ],\n        // -- BEGIN <script> tags handling\n        // After <script\n        script: [\n            [/type/, 'attribute.name', '@scriptAfterType'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/>/, { token: 'delimiter', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],\n            [/[ \\t\\r\\n]+/],\n            [/(<\\/)(script\\s*)(>)/, ['delimiter', 'tag', { token: 'delimiter', next: '@pop' }]]\n        ],\n        // After <script ... type\n        scriptAfterType: [\n            [/=/, 'delimiter', '@scriptAfterTypeEquals'],\n            [/>/, { token: 'delimiter', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <script ... type =\n        scriptAfterTypeEquals: [\n            [/\"([^\"]*)\"/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],\n            [/'([^']*)'/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],\n            [/>/, { token: 'delimiter', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <script ... type = $S2\n        scriptWithCustomType: [\n            [/>/, { token: 'delimiter', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        scriptEmbedded: [\n            [/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\n            [/[^<]+/, '']\n        ],\n        // -- END <script> tags handling\n        // -- BEGIN <style> tags handling\n        // After <style\n        style: [\n            [/type/, 'attribute.name', '@styleAfterType'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/>/, { token: 'delimiter', next: '@styleEmbedded', nextEmbedded: 'text/css' }],\n            [/[ \\t\\r\\n]+/],\n            [/(<\\/)(style\\s*)(>)/, ['delimiter', 'tag', { token: 'delimiter', next: '@pop' }]]\n        ],\n        // After <style ... type\n        styleAfterType: [\n            [/=/, 'delimiter', '@styleAfterTypeEquals'],\n            [/>/, { token: 'delimiter', next: '@styleEmbedded', nextEmbedded: 'text/css' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <style ... type =\n        styleAfterTypeEquals: [\n            [/\"([^\"]*)\"/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],\n            [/'([^']*)'/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],\n            [/>/, { token: 'delimiter', next: '@styleEmbedded', nextEmbedded: 'text/css' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <style ... type = $S2\n        styleWithCustomType: [\n            [/>/, { token: 'delimiter', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        styleEmbedded: [\n            [/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\n            [/[^<]+/, '']\n        ],\n    },\n};\n"]}