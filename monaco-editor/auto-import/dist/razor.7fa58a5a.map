{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/razor/razor.js"],"names":["_monaco","monaco","self","EMPTY_ELEMENTS","conf","open","close","RegExp","join","indentAction","languages","IndentAction","IndentOutdent","Indent","language","token","switchTo","next","nextEmbedded","include"],"mappings":";AAIA,aAuCO,OAAA,eAAA,QAAA,cAAA,OAAA,IArCP,IAAIA,EAA6B,oBAAXC,OAAyBC,KAAKD,OAASA,OACzDE,GAAkB,OAAQ,OAAQ,KAAM,MAAO,QAAS,KAAM,MAAO,QAAS,SAAU,OAAQ,WAAY,OAAQ,QAAS,SAAU,QAAS,OACzIC,EAAO,QAAA,MACD,YAAA,mFACH,UACQ,cAAC,UAAQ,WAEjB,WACL,UAAQ,WACR,IAAK,MACL,IAAK,MACL,IAAK,MAEQ,mBACZC,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAMC,MAAO,MAEP,mBACZD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAMC,MAAO,MACnBD,KAAM,IAAKC,MAAO,MAEV,eAEM,WAAA,IAAIC,OAAO,UAAYJ,EAAeK,KAAK,KAAO,uCAAwC,KAC3F,UAAA,wBACH,QAAEC,aAAcT,EAAQU,UAAUC,aAAaC,iBAG3C,WAAA,IAAIL,OAAO,UAAYJ,EAAeK,KAAK,KAAO,uCAAwC,KAC9F,QAAEC,aAAcT,EAAQU,UAAUC,aAAaE,WAIxDC,EAAW,QAAA,UACJ,aAAA,GACA,aAAA,GAGH,WACD,OACD,OACA,SAAWC,MAAO,WAAYC,SAAU,8BACxC,YAAa,eAAgB,aAC7B,OAAQ,eAAgB,aACxB,iBAAkB,iBAAkB,WAAY,oBAChD,eAAgB,kBAAoBD,MAAO,WAAYE,KAAM,cAC7D,cAAe,kBAAoBF,MAAO,WAAYE,KAAM,aAC5D,eAAgB,kBAAoBF,MAAO,WAAYE,KAAM,gBAC7D,cAAe,kBAAoBF,MAAO,WAAYE,KAAM,gBAC5D,IAAK,mBACL,eACA,WAEI,UACJ,SAAWF,MAAO,WAAYC,SAAU,iCACxC,QAAS,yBACT,IAAK,eAAgB,SAEjB,UACJ,SAAWD,MAAO,WAAYC,SAAU,iCACxC,MAAO,eAAgB,SACvB,QAAS,yBACT,IAAK,yBAEA,WACL,SAAWD,MAAO,WAAYC,SAAU,kCACxC,OAAQ,iBAAkB,SAC1B,YAAa,oBACb,YAAa,oBACb,UAAW,mBACX,IAAK,cACL,eAIG,SACH,SAAWD,MAAO,WAAYC,SAAU,gCACxC,OAAQ,iBAAkB,qBAC1B,YAAa,oBACb,YAAa,oBACb,UAAW,mBACX,IAAK,cACL,KAAOD,MAAO,iBAAkBE,KAAM,kCAAmCC,aAAc,qBACvF,eACA,uBAAwB,iBAAkB,YAAcH,MAAO,iBAAkBE,KAAM,WAG3E,kBACZ,SAAWF,MAAO,WAAYC,SAAU,yCACxC,IAAK,YAAa,2BAClB,KAAOD,MAAO,iBAAkBE,KAAM,kCAAmCC,aAAc,qBACvF,eACA,iBAAmBH,MAAO,WAAYE,KAAM,UAG1B,wBAClB,SAAWF,MAAO,WAAYC,SAAU,+CACxC,aAAeD,MAAO,kBAAmBC,SAAU,8BACnD,aAAeD,MAAO,kBAAmBC,SAAU,8BACnD,KAAOD,MAAO,iBAAkBE,KAAM,kCAAmCC,aAAc,qBACvF,eACA,iBAAmBH,MAAO,WAAYE,KAAM,UAG3B,uBACjB,SAAWF,MAAO,WAAYC,SAAU,kDACxC,KAAOD,MAAO,iBAAkBE,KAAM,sBAAuBC,aAAc,SAC3E,YAAa,oBACb,YAAa,oBACb,UAAW,mBACX,IAAK,cACL,eACA,iBAAmBH,MAAO,WAAYE,KAAM,UAEjC,iBACX,SAAWF,MAAO,WAAYC,SAAU,2CAA4CE,aAAc,UAClG,aAAeH,MAAO,WAAYE,KAAM,OAAQC,aAAc,UAK5D,QACF,SAAWH,MAAO,WAAYC,SAAU,+BACxC,OAAQ,iBAAkB,oBAC1B,YAAa,oBACb,YAAa,oBACb,UAAW,mBACX,IAAK,cACL,KAAOD,MAAO,iBAAkBE,KAAM,0BAA2BC,aAAc,cAC/E,eACA,sBAAuB,iBAAkB,YAAcH,MAAO,iBAAkBE,KAAM,WAG3E,iBACX,SAAWF,MAAO,WAAYC,SAAU,wCACxC,IAAK,YAAa,0BAClB,KAAOD,MAAO,iBAAkBE,KAAM,0BAA2BC,aAAc,cAC/E,eACA,gBAAkBH,MAAO,WAAYE,KAAM,UAG1B,uBACjB,SAAWF,MAAO,WAAYC,SAAU,8CACxC,aAAeD,MAAO,kBAAmBC,SAAU,6BACnD,aAAeD,MAAO,kBAAmBC,SAAU,6BACnD,KAAOD,MAAO,iBAAkBE,KAAM,0BAA2BC,aAAc,cAC/E,eACA,gBAAkBH,MAAO,WAAYE,KAAM,UAG3B,sBAChB,SAAWF,MAAO,WAAYC,SAAU,iDACxC,KAAOD,MAAO,iBAAkBE,KAAM,qBAAsBC,aAAc,SAC1E,YAAa,oBACb,YAAa,oBACb,UAAW,mBACX,IAAK,cACL,eACA,gBAAkBH,MAAO,WAAYE,KAAM,UAEjC,gBACV,SAAWF,MAAO,WAAYC,SAAU,0CAA2CE,aAAc,UACjG,YAAcH,MAAO,WAAYE,KAAM,OAAQC,aAAc,UAG9C,qBACf,MAAO,aAAc,+BACrB,QAAS,aAAc,uBACvB,iBAAkB,cAAgBH,MAAO,gBAAiBC,SAAU,eACpE,QAAUD,MAAO,aAAcC,SAAU,cACzC,OAASD,MAAO,aAAcC,SAAU,cAEvB,uBACjB,MAAO,aAAc,+BACrB,QAAS,aAAc,uBACvB,iBAAkB,cAAgBD,MAAO,gBAAiBC,SAAU,WAAYE,aAAc,UAC9F,QAAUH,MAAO,aAAcC,SAAU,WAAYE,aAAc,SACnE,OAASH,MAAO,aAAcC,SAAU,WAAYE,aAAc,SAE5C,4BACtB,MAAO,WAAY,SACnB,QAAS,eACT,IAAK,eAES,oBACd,MAAO,aAAc,SACrB,QAAS,eACT,IAAK,eAES,oBACd,KAAM,uBAAwB,eAC9B,KAAM,2BAA4B,eAClC,OAAQ,WAAY,SACnBC,QAAS,gBAEJ,YACN,KAAM,uBAAwB,eAC9B,KAAM,2BAA4B,eAClC,KAAM,uBAAwB,SAC9B,KAAM,2BAA4B,SACjCA,QAAS,gBAEF,cACR,gBACc,OACe,kBAAEJ,MAAO,cACf,WAAA,oBAIvB,SAAU,uBAEV,eAEA,UAAW,eACX,MAAO,aAAc,uBAErB,YAAa,cACb,YAAa,cAEb,iBAAkB,iBAAkB,WAAY,oBAChD,eAAgB,iBAAkB,WAAY,oBAC9C,iBAAkB,iBAAkB,WAAY,oBAEhD,yCAA0C,iBAE1C,yBAA0B,oBAC1B,2BAA4B,oBAC5B,gCAAiC,kBACjC,gBAAiB,oBACjB,oBAAqB,qBACrB,WAAY,cACZ,KAAM,eAGA,eACX,WAAY,KAAM,QAAS,QAAS,OAAQ,OAC5C,QAAS,KAAM,OAAQ,OACvB,QAAS,OAAQ,UAAW,QAC5B,QAAS,WAAY,UAAW,UAChC,WAAY,KAAM,SAAU,aAC5B,WAAY,QAAS,SAAU,OAC/B,OAAQ,QAAS,UAAW,QAC5B,QAAS,MAAO,UAAW,OAC3B,OAAQ,QAAS,KAAM,WACvB,KAAM,MAAO,YAAa,WAC1B,OAAQ,KAAM,OAAQ,OAAQ,SAC9B,MAAO,OAAQ,YAAa,SAC5B,WAAY,MAAO,WAAY,UAC/B,SAAU,UAAW,YAAa,SAClC,WAAY,MAAO,SAAU,SAC7B,SAAU,QAAS,SAAU,QAC7B,SAAU,aAAc,SAAU,SAClC,SAAU,OAAQ,QAAS,OAC3B,MAAO,SAAU,OAAQ,QACzB,YAAa,SAAU,SAAU,QACjC,MAAO,UAAW,WAAY,OAAQ,OACtC,QAAS,QAAS,QAClB,QAAS,UAEJ,QAAA","file":"razor.7fa58a5a.map","sourceRoot":"../demo","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n// Allow for running under nodejs/requirejs in tests\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\nvar EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];\nexport var conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n    comments: {\n        blockComment: ['<!--', '-->']\n    },\n    brackets: [\n        ['<!--', '-->'],\n        ['<', '>'],\n        ['{', '}'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' }\n    ],\n    surroundingPairs: [\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n        { open: '<', close: '>' }\n    ],\n    onEnterRules: [\n        {\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n            action: { indentAction: _monaco.languages.IndentAction.IndentOutdent }\n        },\n        {\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            action: { indentAction: _monaco.languages.IndentAction.Indent }\n        }\n    ],\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '',\n    // ignoreCase: true,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            [/@@/],\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.root' }],\n            [/<!DOCTYPE/, 'metatag.html', '@doctype'],\n            [/<!--/, 'comment.html', '@comment'],\n            [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n            [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\n            [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\n            [/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n            [/(<\\/)(\\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\n            [/</, 'delimiter.html'],\n            [/[ \\t\\r\\n]+/],\n            [/[^<@]+/],\n        ],\n        doctype: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.comment' }],\n            [/[^>]+/, 'metatag.content.html'],\n            [/>/, 'metatag.html', '@pop'],\n        ],\n        comment: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.comment' }],\n            [/-->/, 'comment.html', '@pop'],\n            [/[^-]+/, 'comment.content.html'],\n            [/./, 'comment.content.html']\n        ],\n        otherTag: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.otherTag' }],\n            [/\\/?>/, 'delimiter.html', '@pop'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n        ],\n        // -- BEGIN <script> tags handling\n        // After <script\n        script: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.script' }],\n            [/type/, 'attribute.name', '@scriptAfterType'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\n            [/[ \\t\\r\\n]+/],\n            [/(<\\/)(script\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\n        ],\n        // After <script ... type\n        scriptAfterType: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.scriptAfterType' }],\n            [/=/, 'delimiter', '@scriptAfterTypeEquals'],\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <script ... type =\n        scriptAfterTypeEquals: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.scriptAfterTypeEquals' }],\n            [/\"([^\"]*)\"/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],\n            [/'([^']*)'/, { token: 'attribute.value', switchTo: '@scriptWithCustomType.$1' }],\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.text/javascript', nextEmbedded: 'text/javascript' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <script ... type = $S2\n        scriptWithCustomType: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.scriptWithCustomType.$S2' }],\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        scriptEmbedded: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInEmbeddedState.scriptEmbedded.$S2', nextEmbedded: '@pop' }],\n            [/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n        ],\n        // -- END <script> tags handling\n        // -- BEGIN <style> tags handling\n        // After <style\n        style: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.style' }],\n            [/type/, 'attribute.name', '@styleAfterType'],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\n            [/[ \\t\\r\\n]+/],\n            [/(<\\/)(style\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\n        ],\n        // After <style ... type\n        styleAfterType: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.styleAfterType' }],\n            [/=/, 'delimiter', '@styleAfterTypeEquals'],\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <style ... type =\n        styleAfterTypeEquals: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.styleAfterTypeEquals' }],\n            [/\"([^\"]*)\"/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],\n            [/'([^']*)'/, { token: 'attribute.value', switchTo: '@styleWithCustomType.$1' }],\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.text/css', nextEmbedded: 'text/css' }],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        // After <style ... type = $S2\n        styleWithCustomType: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInSimpleState.styleWithCustomType.$S2' }],\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],\n            [/\"([^\"]*)\"/, 'attribute.value'],\n            [/'([^']*)'/, 'attribute.value'],\n            [/[\\w\\-]+/, 'attribute.name'],\n            [/=/, 'delimiter'],\n            [/[ \\t\\r\\n]+/],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\n        ],\n        styleEmbedded: [\n            [/@[^@]/, { token: '@rematch', switchTo: '@razorInEmbeddedState.styleEmbedded.$S2', nextEmbedded: '@pop' }],\n            [/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\n        ],\n        // -- END <style> tags handling\n        razorInSimpleState: [\n            [/@\\*/, 'comment.cs', '@razorBlockCommentTopLevel'],\n            [/@[{(]/, 'metatag.cs', '@razorRootTopLevel'],\n            [/(@)(\\s*[\\w]+)/, ['metatag.cs', { token: 'identifier.cs', switchTo: '@$S2.$S3' }]],\n            [/[})]/, { token: 'metatag.cs', switchTo: '@$S2.$S3' }],\n            [/\\*@/, { token: 'comment.cs', switchTo: '@$S2.$S3' }],\n        ],\n        razorInEmbeddedState: [\n            [/@\\*/, 'comment.cs', '@razorBlockCommentTopLevel'],\n            [/@[{(]/, 'metatag.cs', '@razorRootTopLevel'],\n            [/(@)(\\s*[\\w]+)/, ['metatag.cs', { token: 'identifier.cs', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }]],\n            [/[})]/, { token: 'metatag.cs', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }],\n            [/\\*@/, { token: 'comment.cs', switchTo: '@$S2.$S3', nextEmbedded: '$S3' }],\n        ],\n        razorBlockCommentTopLevel: [\n            [/\\*@/, '@rematch', '@pop'],\n            [/[^*]+/, 'comment.cs'],\n            [/./, 'comment.cs']\n        ],\n        razorBlockComment: [\n            [/\\*@/, 'comment.cs', '@pop'],\n            [/[^*]+/, 'comment.cs'],\n            [/./, 'comment.cs']\n        ],\n        razorRootTopLevel: [\n            [/\\{/, 'delimiter.bracket.cs', '@razorRoot'],\n            [/\\(/, 'delimiter.parenthesis.cs', '@razorRoot'],\n            [/[})]/, '@rematch', '@pop'],\n            { include: 'razorCommon' }\n        ],\n        razorRoot: [\n            [/\\{/, 'delimiter.bracket.cs', '@razorRoot'],\n            [/\\(/, 'delimiter.parenthesis.cs', '@razorRoot'],\n            [/\\}/, 'delimiter.bracket.cs', '@pop'],\n            [/\\)/, 'delimiter.parenthesis.cs', '@pop'],\n            { include: 'razorCommon' }\n        ],\n        razorCommon: [\n            [/[a-zA-Z_]\\w*/, {\n                    cases: {\n                        '@razorKeywords': { token: 'keyword.cs' },\n                        '@default': 'identifier.cs'\n                    }\n                }],\n            // brackets\n            [/[\\[\\]]/, 'delimiter.array.cs'],\n            // whitespace\n            [/[ \\t\\r\\n]+/],\n            // comments\n            [/\\/\\/.*$/, 'comment.cs'],\n            [/@\\*/, 'comment.cs', '@razorBlockComment'],\n            // strings\n            [/\"([^\"]*)\"/, 'string.cs'],\n            [/'([^']*)'/, 'string.cs'],\n            // simple html\n            [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n            [/(<)(\\w+)(>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n            [/(<\\/)(\\w+)(>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\n            // delimiters\n            [/[\\+\\-\\*\\%\\&\\|\\^\\~\\!\\=\\<\\>\\/\\?\\;\\:\\.\\,]/, 'delimiter.cs'],\n            // numbers\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float.cs'],\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float.cs'],\n            [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex.cs'],\n            [/0[0-7']*[0-7]/, 'number.octal.cs'],\n            [/0[bB][0-1']*[0-1]/, 'number.binary.cs'],\n            [/\\d[\\d']*/, 'number.cs'],\n            [/\\d/, 'number.cs'],\n        ]\n    },\n    razorKeywords: [\n        'abstract', 'as', 'async', 'await', 'base', 'bool',\n        'break', 'by', 'byte', 'case',\n        'catch', 'char', 'checked', 'class',\n        'const', 'continue', 'decimal', 'default',\n        'delegate', 'do', 'double', 'descending',\n        'explicit', 'event', 'extern', 'else',\n        'enum', 'false', 'finally', 'fixed',\n        'float', 'for', 'foreach', 'from',\n        'goto', 'group', 'if', 'implicit',\n        'in', 'int', 'interface', 'internal',\n        'into', 'is', 'lock', 'long', 'nameof',\n        'new', 'null', 'namespace', 'object',\n        'operator', 'out', 'override', 'orderby',\n        'params', 'private', 'protected', 'public',\n        'readonly', 'ref', 'return', 'switch',\n        'struct', 'sbyte', 'sealed', 'short',\n        'sizeof', 'stackalloc', 'static', 'string',\n        'select', 'this', 'throw', 'true',\n        'try', 'typeof', 'uint', 'ulong',\n        'unchecked', 'unsafe', 'ushort', 'using',\n        'var', 'virtual', 'volatile', 'void', 'when',\n        'while', 'where', 'yield',\n        'model', 'inject' // Razor specific\n    ],\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n};\n"]}