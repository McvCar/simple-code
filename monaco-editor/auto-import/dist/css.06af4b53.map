{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/css/css.js"],"names":["conf","open","close","notIn","RegExp","language","token","include","next","switchTo"],"mappings":"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","file":"css.06af4b53.map","sourceRoot":"../demo","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|((::|[@#.!:])?[\\w-?]+%?)|::|[@#.!:]/g,\n    comments: {\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\n            end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.css',\n    ws: '[ \\t\\n\\r\\f]*',\n    identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.bracket' },\n        { open: '[', close: ']', token: 'delimiter.bracket' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    tokenizer: {\n        root: [\n            { include: '@selector' },\n        ],\n        selector: [\n            { include: '@comments' },\n            { include: '@import' },\n            { include: '@strings' },\n            ['[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)', { token: 'keyword', next: '@keyframedeclaration' }],\n            ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],\n            ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\n            ['(url-prefix)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            ['(url)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            { include: '@selectorname' },\n            ['[\\\\*]', 'tag'],\n            ['[>\\\\+,]', 'delimiter'],\n            ['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\n            ['{', { token: 'delimiter.bracket', next: '@selectorbody' }]\n        ],\n        selectorbody: [\n            { include: '@comments' },\n            ['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],\n            ['}', { token: 'delimiter.bracket', next: '@pop' }]\n        ],\n        selectorname: [\n            ['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'],\n        ],\n        selectorattribute: [\n            { include: '@term' },\n            [']', { token: 'delimiter.bracket', next: '@pop' }],\n        ],\n        term: [\n            { include: '@comments' },\n            ['(url-prefix)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            ['(url)(\\\\()', ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]],\n            { include: '@functioninvocation' },\n            { include: '@numbers' },\n            { include: '@name' },\n            ['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'delimiter'],\n            [',', 'delimiter']\n        ],\n        rulevalue: [\n            { include: '@comments' },\n            { include: '@strings' },\n            { include: '@term' },\n            ['!important', 'keyword'],\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\n        ],\n        warndebug: [\n            ['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }]\n        ],\n        import: [\n            ['[@](import)', { token: 'keyword', next: '@declarationbody' }]\n        ],\n        urldeclaration: [\n            { include: '@strings' },\n            ['[^)\\r\\n]+', 'string'],\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\n        ],\n        parenthizedterm: [\n            { include: '@term' },\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\n        ],\n        declarationbody: [\n            { include: '@term' },\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\n        ],\n        comments: [\n            ['\\\\/\\\\*', 'comment', '@comment'],\n            ['\\\\/\\\\/+.*', 'comment']\n        ],\n        comment: [\n            ['\\\\*\\\\/', 'comment', '@pop'],\n            [/[^*/]+/, 'comment'],\n            [/./, 'comment'],\n        ],\n        name: [\n            ['@identifier', 'attribute.value']\n        ],\n        numbers: [\n            ['-?(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'attribute.value.number', next: '@units' }],\n            ['#[0-9a-fA-F_]+(?!\\\\w)', 'attribute.value.hex']\n        ],\n        units: [\n            ['(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?', 'attribute.value.unit', '@pop']\n        ],\n        keyframedeclaration: [\n            ['@identifier', 'attribute.value'],\n            ['{', { token: 'delimiter.bracket', switchTo: '@keyframebody' }],\n        ],\n        keyframebody: [\n            { include: '@term' },\n            ['{', { token: 'delimiter.bracket', next: '@selectorbody' }],\n            ['}', { token: 'delimiter.bracket', next: '@pop' }],\n        ],\n        functioninvocation: [\n            ['@identifier\\\\(', { token: 'attribute.value', next: '@functionarguments' }],\n        ],\n        functionarguments: [\n            ['\\\\$@identifier@ws:', 'attribute.name'],\n            ['[,]', 'delimiter'],\n            { include: '@term' },\n            ['\\\\)', { token: 'attribute.value', next: '@pop' }],\n        ],\n        strings: [\n            ['~?\"', { token: 'string', next: '@stringenddoublequote' }],\n            ['~?\\'', { token: 'string', next: '@stringendquote' }]\n        ],\n        stringenddoublequote: [\n            ['\\\\\\\\.', 'string'],\n            ['\"', { token: 'string', next: '@pop' }],\n            [/[^\\\\\"]+/, 'string'],\n            ['.', 'string']\n        ],\n        stringendquote: [\n            ['\\\\\\\\.', 'string'],\n            ['\\'', { token: 'string', next: '@pop' }],\n            [/[^\\\\']+/, 'string'],\n            ['.', 'string']\n        ]\n    }\n};\n"]}