{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/sb/sb.js"],"names":["conf","open","close","notIn","language","token","include"],"mappings":";AAIA,aAkBO,OAAA,eAAA,QAAA,cAAA,OAAA,IAjBA,IAAIA,EAAO,QAAA,MACJ,UACO,YAAA,KAEP,WACL,IAAK,MAAO,IAAK,MACjB,KAAM,UACN,QAAS,aACT,MAAO,WACP,MAAO,WAEM,mBACZC,KAAM,IAAKC,MAAO,IAAKC,OAAQ,SAAU,aACzCF,KAAM,IAAKC,MAAO,IAAKC,OAAQ,SAAU,aACzCF,KAAM,IAAKC,MAAO,IAAKC,OAAQ,SAAU,cAGxCC,EAAW,QAAA,UACJ,aAAA,GACA,aAAA,MACF,YAAA,EACF,WACJC,MAAO,kBAAmBJ,KAAM,IAAKC,MAAO,MAC5CG,MAAO,wBAAyBJ,KAAM,IAAKC,MAAO,MAElDG,MAAO,iBAAkBJ,KAAM,KAAMC,MAAO,UAC5CG,MAAO,oBAAqBJ,KAAM,QAASC,MAAO,aAClDG,MAAO,kBAAmBJ,KAAM,MAAOC,MAAO,WAC9CG,MAAO,kBAAmBJ,KAAM,MAAOC,MAAO,WAE1C,UACN,OAAQ,SAAU,SAAU,QAAS,SAAU,WAC/C,MAAO,OAAQ,KAAM,OAAQ,MAAO,OAAQ,KAAM,SAE5C,UACN,KAAM,MAAO,QAAS,OAEf,WAAC,IAAK,IAAK,KAAM,KAAM,KAAM,MAAO,KAAM,IAAK,IAAK,IAAK,IAAK,KAE7D,WAAA,iBACH,QAAA,oBACA,QAAA,wEAEE,WACD,OAEAI,QAAS,gBAEV,uBAAwB,SAExB,eACc,OACU,aAAED,MAAO,cACR,aAAA,WACF,WAAA,oBAIvB,sBACc,OACG,IAAC,YAAa,eACR,WAAA,OAIvB,WAAY,iBACZ,MAAO,WAEP,WAAY,cACZ,YACc,OACW,aAAA,WACF,WAAA,gBAIvB,kBAAmB,mBACnB,IAAK,SAAU,YAER,aACP,aAAc,KACd,UAAW,YAER,SACH,UAAW,WACX,WAAY,kBACZ,MAAO,0BACP,MAAO,SAAU","file":"sb.8c2d8077.map","sourceRoot":"../demo","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: '\\'',\n    },\n    brackets: [\n        ['(', ')'], ['[', ']'],\n        ['If', 'EndIf'],\n        ['While', 'EndWhile'],\n        ['For', 'EndFor'],\n        ['Sub', 'EndSub']\n    ],\n    autoClosingPairs: [\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.sb',\n    ignoreCase: true,\n    brackets: [\n        { token: 'delimiter.array', open: '[', close: ']' },\n        { token: 'delimiter.parenthesis', open: '(', close: ')' },\n        // Special bracket statement pairs\n        { token: 'keyword.tag-if', open: 'If', close: 'EndIf' },\n        { token: 'keyword.tag-while', open: 'While', close: 'EndWhile' },\n        { token: 'keyword.tag-for', open: 'For', close: 'EndFor' },\n        { token: 'keyword.tag-sub', open: 'Sub', close: 'EndSub' },\n    ],\n    keywords: [\n        'Else', 'ElseIf', 'EndFor', 'EndIf', 'EndSub', 'EndWhile',\n        'For', 'Goto', 'If', 'Step', 'Sub', 'Then', 'To', 'While'\n    ],\n    tagwords: [\n        'If', 'Sub', 'While', 'For'\n    ],\n    operators: ['>', '<', '<>', '<=', '>=', 'And', 'Or', '+', '-', '*', '/', '='],\n    // we include these common regular expressions\n    identifier: /[a-zA-Z_][\\w]*/,\n    symbols: /[=><:+\\-*\\/%\\.,]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // whitespace\n            { include: '@whitespace' },\n            // classes\n            [/(@identifier)(?=[.])/, 'type'],\n            // identifiers, tagwords, and keywords\n            [/@identifier/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@operators': 'operator',\n                        '@default': 'variable.name'\n                    }\n                }],\n            // methods, properties, and events\n            [/([.])(@identifier)/, {\n                    cases: {\n                        '$2': ['delimiter', 'type.member'],\n                        '@default': ''\n                    }\n                }],\n            // numbers\n            [/\\d*\\.\\d+/, 'number.float'],\n            [/\\d+/, 'number'],\n            // delimiters and operators\n            [/[()\\[\\]]/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@operators': 'operator',\n                        '@default': 'delimiter'\n                    }\n                }],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, 'string', '@string'],\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/(\\').*$/, 'comment']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"C?/, 'string', '@pop']\n        ],\n    },\n};\n"]}