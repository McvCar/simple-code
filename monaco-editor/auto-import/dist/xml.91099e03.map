{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/xml/xml.js"],"names":["conf","open","close","language","include","token","next"],"mappings":";AAIA,aAmBO,OAAA,eAAA,QAAA,cAAA,OAAA,IAlBA,IAAIA,EAAO,QAAA,MACJ,UACQ,cAAC,UAAQ,WAEjB,WACL,IAAK,MAEQ,mBACZC,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAMC,MAAO,MACnBD,KAAM,IAAKC,MAAO,MAEN,mBACZD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAMC,MAAO,MACnBD,KAAM,IAAKC,MAAO,OAGjBC,EAAW,QAAA,UACJ,aAAA,GACA,aAAA,OACF,YAAA,EAEG,cAAA,2BACJ,WACD,OACD,SAAU,KACTC,QAAS,gBAEV,wBACSC,MAAO,cACPA,MAAO,MAAOC,KAAM,WAG7B,kCACSD,MAAO,cACPA,MAAO,OACT,IACEA,MAAO,gBAGhB,0BACSA,MAAO,cACPA,MAAO,UAAWC,KAAM,WAGjC,0BACSD,MAAO,cACPA,MAAO,UAAWC,KAAM,WAGjC,gBAAkBD,MAAO,kBAAmBC,KAAM,YAClD,QAAS,kBAEP,QACF,SAAU,KACV,SAAWD,MAAO,kBAAmBC,KAAM,UAC3C,KAAM,KAEN,MACA,aAAc,KACd,8CAA+C,iBAAkB,GAAI,qBACrE,gEAAiE,iBAAkB,GAAI,qBACvF,8CAA+C,iBAAkB,GAAI,qBACrE,iBAAkB,mBAClB,OAASD,MAAO,YAAaC,KAAM,UACnC,YACSD,MAAO,QACPA,MAAO,YAAaC,KAAM,WAEnC,KAAOD,MAAO,YAAaC,KAAM,UAE1B,aACP,aAAc,KACd,QAAUD,MAAO,UAAWC,KAAM,cAE9B,UACJ,UAAW,oBACX,OAASD,MAAO,UAAWC,KAAM,UACjC,OAAQ,4BACR,QAAS","file":"xml.91099e03.map","sourceRoot":"../demo","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        blockComment: ['<!--', '-->'],\n    },\n    brackets: [\n        ['<', '>']\n    ],\n    autoClosingPairs: [\n        { open: '<', close: '>' },\n        { open: '\\'', close: '\\'' },\n        { open: '\"', close: '\"' },\n    ],\n    surroundingPairs: [\n        { open: '<', close: '>' },\n        { open: '\\'', close: '\\'' },\n        { open: '\"', close: '\"' },\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.xml',\n    ignoreCase: true,\n    // Useful regular expressions\n    qualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\n    tokenizer: {\n        root: [\n            [/[^<&]+/, ''],\n            { include: '@whitespace' },\n            // Standard opening tag\n            [/(<)(@qualifiedName)/, [\n                    { token: 'delimiter' },\n                    { token: 'tag', next: '@tag' }\n                ]],\n            // Standard closing tag\n            [/(<\\/)(@qualifiedName)(\\s*)(>)/, [\n                    { token: 'delimiter' },\n                    { token: 'tag' },\n                    '',\n                    { token: 'delimiter' }\n                ]],\n            // Meta tags - instruction\n            [/(<\\?)(@qualifiedName)/, [\n                    { token: 'delimiter' },\n                    { token: 'metatag', next: '@tag' }\n                ]],\n            // Meta tags - declaration\n            [/(<\\!)(@qualifiedName)/, [\n                    { token: 'delimiter' },\n                    { token: 'metatag', next: '@tag' }\n                ]],\n            // CDATA\n            [/<\\!\\[CDATA\\[/, { token: 'delimiter.cdata', next: '@cdata' }],\n            [/&\\w+;/, 'string.escape'],\n        ],\n        cdata: [\n            [/[^\\]]+/, ''],\n            [/\\]\\]>/, { token: 'delimiter.cdata', next: '@pop' }],\n            [/\\]/, '']\n        ],\n        tag: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name', '', 'attribute.value']],\n            [/(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/, ['attribute.name', '', 'attribute.value']],\n            [/(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/, ['attribute.name', '', 'attribute.value']],\n            [/@qualifiedName/, 'attribute.name'],\n            [/\\?>/, { token: 'delimiter', next: '@pop' }],\n            [/(\\/)(>)/, [\n                    { token: 'tag' },\n                    { token: 'delimiter', next: '@pop' }\n                ]],\n            [/>/, { token: 'delimiter', next: '@pop' }],\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/<!--/, { token: 'comment', next: '@comment' }]\n        ],\n        comment: [\n            [/[^<\\-]+/, 'comment.content'],\n            [/-->/, { token: 'comment', next: '@pop' }],\n            [/<!--/, 'comment.content.invalid'],\n            [/[<\\-]/, 'comment.content']\n        ],\n    },\n};\n"]}