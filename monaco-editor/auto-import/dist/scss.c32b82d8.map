{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/scss/scss.js"],"names":["conf","open","close","notIn","RegExp","language","token","include","next","switchTo"],"mappings":"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","file":"scss.c32b82d8.map","sourceRoot":"../demo","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|([@$#!.:]?[\\w-?]+%?)|[@#!.]/g,\n    comments: {\n        blockComment: ['/*', '*/'],\n        lineComment: '//'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\n            end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.scss',\n    ws: '[ \\t\\n\\r\\f]*',\n    identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.bracket' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    tokenizer: {\n        root: [\n            { include: '@selector' },\n        ],\n        selector: [\n            { include: '@comments' },\n            { include: '@import' },\n            { include: '@variabledeclaration' },\n            { include: '@warndebug' },\n            ['[@](include)', { token: 'keyword', next: '@includedeclaration' }],\n            ['[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)', { token: 'keyword', next: '@keyframedeclaration' }],\n            ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],\n            ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\n            ['[@](function)', { token: 'keyword', next: '@functiondeclaration' }],\n            ['[@](mixin)', { token: 'keyword', next: '@mixindeclaration' }],\n            ['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\n            { include: '@controlstatement' },\n            { include: '@selectorname' },\n            ['[&\\\\*]', 'tag'],\n            ['[>\\\\+,]', 'delimiter'],\n            ['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\n            ['{', { token: 'delimiter.curly', next: '@selectorbody' }],\n        ],\n        selectorbody: [\n            ['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],\n            { include: '@selector' },\n            ['[@](extend)', { token: 'keyword', next: '@extendbody' }],\n            ['[@](return)', { token: 'keyword', next: '@declarationbody' }],\n            ['}', { token: 'delimiter.curly', next: '@pop' }],\n        ],\n        selectorname: [\n            ['#{', { token: 'meta', next: '@variableinterpolation' }],\n            ['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'],\n        ],\n        selectorattribute: [\n            { include: '@term' },\n            [']', { token: 'delimiter.bracket', next: '@pop' }],\n        ],\n        term: [\n            { include: '@comments' },\n            ['url(\\\\-prefix)?\\\\(', { token: 'meta', next: '@urldeclaration' }],\n            { include: '@functioninvocation' },\n            { include: '@numbers' },\n            { include: '@strings' },\n            { include: '@variablereference' },\n            ['(and\\\\b|or\\\\b|not\\\\b)', 'operator'],\n            { include: '@name' },\n            ['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'operator'],\n            [',', 'delimiter'],\n            ['!default', 'literal'],\n            ['\\\\(', { token: 'delimiter.parenthesis', next: '@parenthizedterm' }],\n        ],\n        rulevalue: [\n            { include: '@term' },\n            ['!important', 'literal'],\n            [';', 'delimiter', '@pop'],\n            ['{', { token: 'delimiter.curly', switchTo: '@nestedproperty' }],\n            ['(?=})', { token: '', next: '@pop' }],\n        ],\n        nestedproperty: [\n            ['[*_]?@identifier@ws:', 'attribute.name', '@rulevalue'],\n            { include: '@comments' },\n            ['}', { token: 'delimiter.curly', next: '@pop' }],\n        ],\n        warndebug: [\n            ['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }],\n        ],\n        import: [\n            ['[@](import)', { token: 'keyword', next: '@declarationbody' }],\n        ],\n        variabledeclaration: [\n            ['\\\\$@identifier@ws:', 'variable.decl', '@declarationbody'],\n        ],\n        urldeclaration: [\n            { include: '@strings' },\n            ['[^)\\r\\n]+', 'string'],\n            ['\\\\)', { token: 'meta', next: '@pop' }],\n        ],\n        parenthizedterm: [\n            { include: '@term' },\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }],\n        ],\n        declarationbody: [\n            { include: '@term' },\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }],\n        ],\n        extendbody: [\n            { include: '@selectorname' },\n            ['!optional', 'literal'],\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }],\n        ],\n        variablereference: [\n            ['\\\\$@identifier', 'variable.ref'],\n            ['\\\\.\\\\.\\\\.', 'operator'],\n            ['#{', { token: 'meta', next: '@variableinterpolation' }],\n        ],\n        variableinterpolation: [\n            { include: '@variablereference' },\n            ['}', { token: 'meta', next: '@pop' }],\n        ],\n        comments: [\n            ['\\\\/\\\\*', 'comment', '@comment'],\n            ['\\\\/\\\\/+.*', 'comment'],\n        ],\n        comment: [\n            ['\\\\*\\\\/', 'comment', '@pop'],\n            ['.', 'comment'],\n        ],\n        name: [\n            ['@identifier', 'attribute.value'],\n        ],\n        numbers: [\n            ['(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', { token: 'number', next: '@units' }],\n            ['#[0-9a-fA-F_]+(?!\\\\w)', 'number.hex'],\n        ],\n        units: [\n            ['(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?', 'number', '@pop']\n        ],\n        functiondeclaration: [\n            ['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\n            ['{', { token: 'delimiter.curly', switchTo: '@functionbody' }],\n        ],\n        mixindeclaration: [\n            // mixin with parameters\n            ['@identifier@ws\\\\(', { token: 'meta', next: '@parameterdeclaration' }],\n            // mixin without parameters\n            ['@identifier', 'meta'],\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }],\n        ],\n        parameterdeclaration: [\n            ['\\\\$@identifier@ws:', 'variable.decl'],\n            ['\\\\.\\\\.\\\\.', 'operator'],\n            [',', 'delimiter'],\n            { include: '@term' },\n            ['\\\\)', { token: 'meta', next: '@pop' }],\n        ],\n        includedeclaration: [\n            { include: '@functioninvocation' },\n            ['@identifier', 'meta'],\n            [';', 'delimiter', '@pop'],\n            ['(?=})', { token: '', next: '@pop' }],\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }],\n        ],\n        keyframedeclaration: [\n            ['@identifier', 'meta'],\n            ['{', { token: 'delimiter.curly', switchTo: '@keyframebody' }],\n        ],\n        keyframebody: [\n            { include: '@term' },\n            ['{', { token: 'delimiter.curly', next: '@selectorbody' }],\n            ['}', { token: 'delimiter.curly', next: '@pop' }],\n        ],\n        controlstatement: [\n            ['[@](if|else|for|while|each|media)', { token: 'keyword.flow', next: '@controlstatementdeclaration' }],\n        ],\n        controlstatementdeclaration: [\n            ['(in|from|through|if|to)\\\\b', { token: 'keyword.flow' }],\n            { include: '@term' },\n            ['{', { token: 'delimiter.curly', switchTo: '@selectorbody' }],\n        ],\n        functionbody: [\n            ['[@](return)', { token: 'keyword' }],\n            { include: '@variabledeclaration' },\n            { include: '@term' },\n            { include: '@controlstatement' },\n            [';', 'delimiter'],\n            ['}', { token: 'delimiter.curly', next: '@pop' }],\n        ],\n        functioninvocation: [\n            ['@identifier\\\\(', { token: 'meta', next: '@functionarguments' }],\n        ],\n        functionarguments: [\n            ['\\\\$@identifier@ws:', 'attribute.name'],\n            ['[,]', 'delimiter'],\n            { include: '@term' },\n            ['\\\\)', { token: 'meta', next: '@pop' }],\n        ],\n        strings: [\n            ['~?\"', { token: 'string.delimiter', next: '@stringenddoublequote' }],\n            ['~?\\'', { token: 'string.delimiter', next: '@stringendquote' }]\n        ],\n        stringenddoublequote: [\n            ['\\\\\\\\.', 'string'],\n            ['\"', { token: 'string.delimiter', next: '@pop' }],\n            ['.', 'string']\n        ],\n        stringendquote: [\n            ['\\\\\\\\.', 'string'],\n            ['\\'', { token: 'string.delimiter', next: '@pop' }],\n            ['.', 'string']\n        ]\n    }\n};\n"]}