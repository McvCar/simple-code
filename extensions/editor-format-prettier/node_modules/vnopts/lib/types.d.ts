import { Schema } from './schema';
import { normalizeDefaultResult, normalizeDeprecatedResult, normalizeForwardResult, normalizeRedirectResult, normalizeValidateResult, NotEmptyArray } from './utils';
export interface Utils {
    logger: Logger;
    descriptor: Descriptor;
    schemas: Record<string, Schema<any>>;
    normalizeDefaultResult: typeof normalizeDefaultResult;
    normalizeDeprecatedResult: typeof normalizeDeprecatedResult;
    normalizeForwardResult: typeof normalizeForwardResult;
    normalizeRedirectResult: typeof normalizeRedirectResult;
    normalizeValidateResult: typeof normalizeValidateResult;
}
export interface Logger {
    warn(message: string): void;
}
export interface Descriptor {
    key: (key: OptionKey) => string;
    value: (value: OptionValue) => string;
    pair: (pair: OptionPair) => string;
}
export declare type UnknownHandler = (key: OptionKey, value: OptionValue, utils: Utils) => void | Options;
export declare type InvalidHandler = (key: OptionKey, value: OptionValue, utils: Utils) => string | Error;
export declare type DeprecatedHandler = (keyOrPair: OptionKey | OptionPair, redirectTo: undefined | TransferTo, utils: Utils) => string;
export declare type OptionKey = string;
export declare type OptionValue = any;
export interface OptionPair {
    key: OptionKey;
    value: OptionValue;
}
export interface Options {
    [key: string]: OptionValue;
}
export declare type TransferTo = OptionKey | OptionPair;
export declare type TransferResult<$Value> = TransferTo | {
    from?: $Value;
    to: TransferTo;
};
export interface NormalizedTransferResult<$Value> {
    from: $Value;
    to: TransferTo;
}
export declare type ForwardResult<$Value> = undefined | TransferResult<$Value> | Array<TransferResult<$Value>>;
export declare type NormalizedForwardResult<$Value> = Array<NormalizedTransferResult<$Value>>;
export declare type RedirectResult<$Value> = ForwardResult<$Value> | {
    remain?: $Value;
    redirect: ForwardResult<$Value>;
};
export interface NormalizedRedirectResult<$Value> {
    remain?: $Value;
    redirect: NormalizedForwardResult<$Value>;
}
export declare type ValidateResult = boolean | {
    value: unknown;
};
export declare type NormalizedValidateResult = true | {
    value: unknown;
};
export declare type DeprecatedResult<$Value> = boolean | {
    value: $Value;
} | Array<{
    value: $Value;
}>;
export declare type NormalizedDeprecatedResult<$Value> = false | NotEmptyArray<{
    value: $Value;
}>;
export declare type NormalizedDeprecatedResultWithTrue<$Value> = true | NormalizedDeprecatedResult<$Value>;
export declare type ExpectedResult = string;
export declare type DefaultResult<$Value> = undefined | {
    value?: $Value;
};
export interface NormalizedDefaultResult<$Value> {
    value?: $Value;
}
