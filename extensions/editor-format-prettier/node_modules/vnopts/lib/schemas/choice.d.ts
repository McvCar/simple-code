import { Schema, SchemaHandlers, SchemaParameters } from '../schema';
import { DeprecatedResult, ForwardResult, RedirectResult, TransferTo, Utils, ValidateResult } from '../types';
interface ChoiceInfo {
    value: ChoiceValue;
    deprecated?: boolean;
    redirect?: TransferTo;
    forward?: TransferTo;
}
declare type ChoiceValue = undefined | null | boolean | number | string;
interface ChoiceSchemaParameters extends SchemaParameters<ChoiceValue>, SchemaHandlers<ChoiceValue> {
    choices: Array<ChoiceValue | ChoiceInfo>;
}
export declare class ChoiceSchema extends Schema<ChoiceValue, ChoiceSchemaParameters> {
    private _choices;
    constructor(parameters: ChoiceSchemaParameters);
    expected({ descriptor }: Utils): string;
    validate(value: unknown): ValidateResult;
    deprecated(value: ChoiceValue): DeprecatedResult<ChoiceValue>;
    forward(value: ChoiceValue): ForwardResult<ChoiceValue>;
    redirect(value: ChoiceValue): RedirectResult<ChoiceValue>;
}
export {};
