import { Schema } from './schema';
import { DeprecatedHandler, Descriptor, InvalidHandler, Logger, Options, UnknownHandler } from './types';
export interface NormalizerOptions {
    logger?: false | Logger;
    descriptor?: Descriptor;
    unknown?: UnknownHandler;
    invalid?: InvalidHandler;
    deprecated?: DeprecatedHandler;
}
export declare const normalize: (options: Options, schemas: Schema<any, import("./schema").SchemaHandlers<any>>[], opts?: NormalizerOptions | undefined) => Options;
export declare class Normalizer {
    private _utils;
    private _unknownHandler;
    private _invalidHandler;
    private _deprecatedHandler;
    private _hasDeprecationWarned;
    constructor(schemas: Array<Schema<any>>, opts?: NormalizerOptions);
    cleanHistory(): void;
    normalize(options: Options): Options;
    private _applyNormalization;
}
